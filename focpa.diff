--- focpa.cpp	2017-09-30 14:23:10.693465058 +0200
+++ ../../Daredevil/focpa.cpp	2017-08-29 09:05:13.156612764 +0200
@@ -23,9 +23,7 @@
 #include <stdint.h>
 #include <math.h>
 #include <omp.h>
-//#include <time.h>
 #include <sstream>
-#include <fstream>
 #include "pearson.h"
 #include "cpa.h"
 #include "utils.h"
@@ -34,8 +32,6 @@
 #include "socpa.h"
 
 extern pthread_mutex_t lock;
-int current_key_byte = 0;
-void ***correlation;
 
 /* Implements first order CPA in a faster and multithreaded way on big files,
  * using the vertical partitioning approach.
@@ -127,17 +123,6 @@
     return -1;
   }
 
-  if (conf.corrout)
-  {
-    correlation = (void ***) malloc(16*sizeof(TypeReturn **));
-    for(int i = 0; i < 16; i ++)
-    {
-      correlation[i] = (void**)malloc(256*sizeof(TypeReturn*));
-      for (int b = 0 ; b < 256 ; b++)
-        correlation[i][b] = (void*)malloc(n_samples*sizeof(TypeReturn));
-    }
-  }
-
   FinalConfig<TypeTrace, TypeReturn, TypeGuess> fin_conf = FinalConfig<TypeTrace, TypeReturn, TypeGuess>(&mat_args, &conf, (void*)queues);
   pthread_mutex_init(&lock, NULL);
 
@@ -162,8 +147,6 @@
       continue;
     }
 
-    current_key_byte = bn;
-
     if (conf.sep == "") printf("[ATTACK] Key byte number %i\n\n", bn);
     else if (conf.key_size > 1) printf("%i%s", bn, conf.sep.c_str());
 
@@ -371,47 +354,7 @@
       for (size_t i = 0; i < top_keys.size(); i++) {
           cout << i+1 << ": " << top_keys[i].first << ": " << top_keys[i].second << endl;
       }
-  }
-
-  if (conf.corrout)
-  {
-      // file management
-      // check if correlation.bin exists if yes rename it
-      if (FILE * file = fopen("correlation.bin","r")) {
-	  fclose(file);
-	  
-	  time_t now = time(0);
-	  tm* currentDate = localtime(&now);
-	  char filename[256] = {0};
-	  char timename[256] = {0};
-
-	  strftime(timename,256,"%Y%m%d%H%M%S",currentDate);
-	  strcpy(filename,"correlation_");
-	  strcat(filename, timename);
-	  strcat(filename, ".bin");
-          
-	  std::rename("correlation.bin",filename);
-
-	  printf("[INFO] Exisiting correlation.bin file renamed to %s.\n",filename);
-      }
-      std::ofstream ofs;
-      ofs.open("correlation.bin", std::ios::binary | std::ios::out | std::ios::app);
-      for (int i = 0; i < 16; i++)
-          for (int j = 0 ; j < 256; j++)
-              for (int k = 0; k < n_samples; k++)
-                  ofs.write(reinterpret_cast<char*>(&((TypeReturn***)correlation)[i][j][k]),sizeof(TypeReturn));
-      ofs.flush();
-      ofs.close();
-
-      // memory management
-      for (int i = 0; i < 16; i++)
-      {
-          for (int j = 0; j < 256; j ++)
-              free(correlation[i][j]);
-          free(correlation[i]);
-      }
-      free(correlation);
-  }
+}
 
   for (size_t i = 0; i < sum_bit_corels.size(); i++) {
       delete sum_bit_corels[i];
@@ -475,9 +418,6 @@
       q[k].corr  = corr;
       q[k].time  = i + first_sample + offset;
       q[k].key   = k;
-
-      if (G->fin_conf->conf->corrout)
-	((TypeReturn***)correlation)[current_key_byte][k][i] = corr;
     }
 
     pthread_mutex_lock(&lock);
